#include<iostream>
#include<GL/glut.h>

using namespace std;

int ch,pt,p;
  float xst,yst;
void displayPoint(float x,float y){
   glColor3f(1,0,0);
   glPointSize(2);
   glBegin(GL_POINTS);
   glVertex2i(x,y);
   glEnd();
}

void simpleLine(float x1,float y1,float x2,float y2){
  float xinc,yinc,x,y;
  float dx=abs(x2-x1);
  float dy=abs(y2-y1);

  if(x2>x1){
    xinc=1;
  }
  else{
    xinc=-1;
  }

   if(y2>y1){
    yinc=1;
  }
  else{
    yinc=-1;
  }

     glBegin(GL_POINTS);
  if(dx>dy){
        p=2*dy-dx;
        x=x1;
        y=y1;


        for(int i=0;i<=dx;i++){
            glVertex2i(x,y);
            x+=xinc;

            if(p>=0){
                p+=2*(dy-dx);
                y+=yinc;
            }
            else{
                p+=2*dy;
            }
        }


  }

  else {
        p=2*dx-dy;
        x=x1;
        y=y1;


        for(int i=0;i<=dy;i++){
            glVertex2i(x,y);
            y+=yinc;

            if(p>=0){
                p+=2*(dx-dy);
                x+=xinc;
            }
            else{
                p+=2*dx;
            }
        }


  }
  glEnd();
  glFlush();
}

void dottedLine(int x1,int y1,int x2,int y2){
  float xinc,yinc,x,y;
  float dx=abs(x2-x1);
  float dy=abs(y2-y1);

  if(x2>x1){
    xinc=1;
  }
  else{
    xinc=-1;
  }

   if(y2>y1){
    yinc=1;
  }
  else{
    yinc=-1;
  }

     glBegin(GL_POINTS);
  if(dx>dy){
        p=2*dy-dx;
        x=x1;
        y=y1;


        for(int i=0;i<=dx;i++){
                 glVertex2i(x,y);
                if(i%3==0){
                    displayPoint(x,y);
                }
                    x+=xinc;

            if(p>=0){
                p+=2*(dy-dx);
                y+=yinc;
            }
            else{
                p+=2*dy;
            }
        }



  }
  else {
        p=2*dx-dy;
        x=x1;
        y=y1;


        for(int i=0;i<=dy;i++){
                 glVertex2i(x,y);
                    if(i%3==0){
                    displayPoint(x,y);
                    }
            y+=yinc;

            if(p>=0){
                p+=2*(dx-dy);
                x+=xinc;
            }
            else{
                p+=2*dx;
            }
        }

        }

  glEnd();
  glFlush();
}


void solidLine(float x1,float y1,float x2,float y2){
  float xinc,yinc,x,y;
  float dx=abs(x2-x1);
  float dy=abs(y2-y1);

  if(x2>x1){
    xinc=1;
  }
  else{
    xinc=-1;
  }

   if(y2>y1){
    yinc=1;
  }
  else{
    yinc=-1;
  }
     glPointSize(10);
     glBegin(GL_POINTS);
  if(dx>dy){
        p=2*dy-dx;
        x=x1;
        y=y1;


        for(int i=0;i<=dx;i++){
            glVertex2i(x,y);
            x+=xinc;

            if(p>=0){
                p+=2*(dy-dx);
                y+=yinc;
            }
            else{
                p+=2*dy;
            }
        }


  }

  else {
        p=2*dx-dy;
        x=x1;
        y=y1;


        for(int i=0;i<=dy;i++){
            glVertex2i(x,y);
            y+=yinc;

            if(p>=0){
                p+=2*(dx-dy);
                x+=xinc;
            }
            else{
                p+=2*dx;
            }
        }


  }
  glEnd();
  glFlush();
}

void myMouse(int button,int state,int x,int y){

if(button==GLUT_LEFT_BUTTON && state==GLUT_DOWN){
             if(pt==0){
                 xst=x;
                 yst=y;
                 pt++;
                         }
            else if(ch==1){
               simpleLine(xst,yst,x,y);

                        }
           else if(ch==2){
              dottedLine(xst,yst,x,y);

                    }
          else if(ch==3){
              solidLine(xst,yst,x,y);

              }
               xst=x;
               yst=y;
                }
else if(button==GLUT_RIGHT_BUTTON && state==GLUT_DOWN){
     pt=0;
}
glFlush();
}

void myKeyboard(unsigned char key,int x,int y){

   switch(key){
   case '1':
       ch=1;
       glutMouseFunc(myMouse);
       break;
   case '2':
       ch=2;
       glutMouseFunc(myMouse);
       break;
   case '3':
       ch=3;
       glutMouseFunc(myMouse);
       break;
   }
   glutPostRedisplay();
   }

void initialise(void){
  glClearColor(1.0,1.0,1.0,1.0);
  glClear(GL_COLOR_BUFFER_BIT);;
  gluOrtho2D(0,600,600,0);
}


void primitive(void){
 glColor3f(1,0,0);
 simpleLine(0,300,600,300);
 simpleLine(300,0,300,600);
 glutKeyboardFunc(myKeyboard);
}


int main(int argc,char **argv){
   glutInit(&argc,argv);
   glutInitDisplayMode(GLUT_SINGLE);
   glutInitWindowPosition(0,0);
   glutInitWindowSize(600,600);
   glutCreateWindow("abcd");
   initialise();
   cout<<"===========================";
   cout<<"\n1.Simple Line";
   cout<<"\n2.Dotted Line";
   cout<<"\n3.Solid Line";
   cout<<"\n=========================";
   glutDisplayFunc(primitive);
   glutMainLoop();
   return 0;
}

































































